////////////////////////
//     GPIO           //
////////////////////////

HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);// aplica nível lógico 1 em um pino do GPIO configurado como saída
HAL_Delay(500);
HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);// aplica nível lógico 0 em um pino do GPIO configurado como saída
HAL_Delay(500);

!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8); // leitura de um pino do GPIO configurado como entrada

////////////////////////
//     INTERRUPÇÃO    //
////////////////////////

// EXTI Line9 External Interrupt ISR Handler CallBackFun

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if(GPIO_Pin == GPIO_PIN_9) // If The INT Source Is EXTI Line9 (A9 Pin)
    {
    HAL_GPIO_TogglePin(GPIOA, 1<<i); // Toggle The Output (LED) Pin

    k++;
    i++;
    if(i>4)
    i=0;


    }
}

// multiplas interrupções

extern int erro_dip;

void HAL_GPIO_EXTI_Callback()
{
	if (GPIO_Pin == GPIO_PIN_8 || GPIO_Pin == GPIO_PIN_11 ||GPIO_Pin == GPIO_PIN_12 ||GPIO_Pin == GPIO_PIN_15 )
		erro_dip = 1;
	
}

////////////////////////
//     temporizador   //
////////////////////////

   /* tem que disparar o contador, se não ele permanece em idle */
  HAL_TIM_Base_Start_IT(&htim3);

/* rotina de interrupção do contador */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	
	/* teste para saber se entrou aqui.. */
     i++;
    if(i==100000)
    i=0;
}

TIM1->ARR = PERIOD; /* Set the Autoreload value */
TIM1->CCR1 = PULSE; /* Set the Pulse value */
TIM1->PSC = Prescaler; /* Set the Prescaler value */
htim3.Init.Period = tim_per; // atualiza o periodo do timer, deve ser igual a TIM1->ARR = tim_per

/*Alterar o período do contador em tempo real, lendo as variáveis na watch window*/
 uint32_t tim_per, tim_psc; // variáveis globais

// no int main, colocar a atualização do prescaller e do ARR, cuidar o numero TIMX para ser igual ao que foi configurado no cubemx
int main(void)
{
    TIM3->ARR = tim_per; // Set the Autoreload value
    TIM3->PSC = tim_psc; // Set the Prescaler value 

}

// na interrupção do contador, colocar um led para piscar, e medir com osciloscópio o período da forma de onda
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1); // medir este pino no osciloscópio..
...
}

// alterar os valores de tim_psc e tim_per durante o pause do debugger, pela watch window, testar valores da equação!!!

/* escolher entre dois períodos de contagem utilizando um botão*/

if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)) // leitura de um pino do GPIO configurado como entrada
     // tim_per=tim_per+100;
    {
      tim_per = 65535; // Set the Autoreload value
      psc_tim = 1550; // Set the Prescaler value 
    }
     
    else
    {
      tim_per = 65535; // Set the Autoreload value
      psc_tim = 45550; // Set the Prescaler value       
      
    }

/* divisor de frequência, é necessário ajustar o incremento das variáveis i j k para obter a divisão adequada */

    j++;
    k++;
    w++;

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    
    if(j==4)
      {
        j=0;
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
      }
    if(k==8)
      {
        k=0;
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
      }
    if(w==16)
      {
        w=0;
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
      }

////////////////////////
//     módulo PWM     //
////////////////////////

/**
  * @brief  Starts the PWM signal generation.
  * @param  htim TIM handle
  * @param  Channel TIM Channels to be enabled
  *          This parameter can be one of the following values:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)



HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
htim4.Instance->CCR1 = (htim4.Instance->ARR*i)/100;

 htim4.Init.Period = 5750; // configura o período do pwm
 sConfigOC.Pulse = 1750; // configura o duty cycle
 
 /*** o código a seguir altera a razão cíclica progressivamente, j=1000 significa que ela altera a cada 1 segundo ****/
 
     for(i=0;i<100;i++)
    {
      htim4.Instance->CCR2 = (htim4.Instance->ARR*i)/100;
      HAL_Delay(j);
    }
	
	// colocar no osciloscópio e medir o duty cycle, observar que ele muda 1% a cada 1 segundo, igual ao for que está dentro do mcu!!!

/*** o código a seguir altera a razão cíclica regressivamente, j=1000 significa que ela altera a cada 1 segundo ****/ 
for(i=0;i>0;i--)
    {
      htim4.Instance->CCR2 = (htim4.Instance->ARR*i)/100;
      HAL_Delay(j);
    }

/*variando a razão cíclica em um switchcase*/
/* rotina de interrupção do contador */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // este led piscando sinaliza que o timer está funcionando!
    
    
	/* teste para saber se entrou aqui.. */
	duty++;
    
	// sinaliza qual case do switch ele está!

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1>>(duty-1),0);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1>>(duty),1);

	if(duty=>4)
    	duty=0;
    
}

switch(duty)
  	{
	case 0:
	{
    		htim4.Instance->CCR2 = (htim4.Instance->ARR*25)/100;	 
    		break;
	}
	case 1:
	{
    		htim4.Instance->CCR2 = (htim4.Instance->ARR*50)/100;
    		break;
	}
	case 2:
	{    
    		htim4.Instance->CCR2 = (htim4.Instance->ARR*75)/100;
    		break;
	}
	case 3:
	{    
    		htim4.Instance->CCR2 = (htim4.Instance->ARR*100)/100;
    		break;
	}
	case 4:
	{	 
    		htim4.Instance->CCR2 = (htim4.Instance->ARR*0)/100;
    		break;
	}
    
  	}


/*O código a seguir altera a razão cíclica de dois canais do PWM timer 9, eles estão nos pinos A2 e A3*/

// variáveis globais
int j=100, i=0, ARR=0,a=0;

// disparo do temporizador 9 para os dois canais
HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 
// colocar dentro do while(1)

for(i=0;i<100;i++)
    {
// o j precisa ser igual a zero para ver os leds evoluirem mais rápido, deixar lento se quiser ver no osciloscópio, ajustar durante a depuração
      if(a==1)
      {
        htim9.Instance->CCR2 = (htim9.Instance->ARR*i)/100;
        HAL_Delay(j);
      }
      else
      {
        htim9.Instance->CCR1 = (htim9.Instance->ARR*i)/100;
        HAL_Delay(j);
      }     
     
    }
    
    for(i=100;i>0;i--)
    {
      if(a==1)
      {
        htim9.Instance->CCR2 = (htim9.Instance->ARR*i)/100;
        HAL_Delay(j);
      }
      else
      {
        htim9.Instance->CCR1 = (htim9.Instance->ARR*i)/100;
        HAL_Delay(j);
      }
    }
    a=!a;
    
// rotina de interrupção - call back do sinal pwm

/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}

// função para interromper/parar o sinal PWM
HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);

// outra forma de atualizar o dutycycle
__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_MAX); // 100% duty em PA6

////////////////////////
//     módulo ADC     //
////////////////////////

/**
  * @brief  Initializes the ADC peripheral and regular group according to  
  *         parameters specified in structure "ADC_InitTypeDef".
  * @note   As prerequisite, ADC clock must be configured at RCC top level
  *         (clock source APB2).
  *         See commented example code below that can be copied and uncommented 
  *         into HAL_ADC_MspInit().
  * @note   Possibility to update parameters on the fly:
  *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
  *         coming from ADC state reset. Following calls to this function can
  *         be used to reconfigure some parameters of ADC_InitTypeDef  
  *         structure on the fly, without modifying MSP configuration. If ADC  
  *         MSP has to be modified again, HAL_ADC_DeInit() must be called
  *         before HAL_ADC_Init().
  *         The setting of these parameters is conditioned to ADC state.
  *         For parameters constraints, see comments of structure 
  *         "ADC_InitTypeDef".
  * @note   This function configures the ADC within 2 scopes: scope of entire 
  *         ADC and scope of regular group. For parameters details, see comments 
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)

MX_ADC1_Init();

/**
  * @brief  Enables ADC, starts conversion of regular group.
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)

HAL_ADC_Start(&hadc1);


/**
  * @brief  Wait for regular group conversion to be completed.
  * @note   This function cannot be used in a particular setup: ADC configured 
  *         in DMA mode.
  *         In this case, DMA resets the flag EOC and polling cannot be
  *         performed on each conversion.
  * @note   On STM32F1 devices, limitation in case of sequencer enabled
  *         (several ranks selected): polling cannot be done on each 
  *         conversion inside the sequence. In this case, polling is replaced by
  *         wait for maximum conversion time.
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)

HAL_ADC_PollForConversion(&hadc1,100);

/**
  * @brief  Get ADC regular group conversion result.
  * @note   Reading register DR automatically clears ADC flag EOC
  *         (ADC group regular end of unitary conversion).
  * @note   This function does not clear ADC flag EOS 
  *         (ADC group regular end of sequence conversion).
  *         Occurrence of flag EOS rising:
  *          - If sequencer is composed of 1 rank, flag EOS is equivalent
  *            to flag EOC.
  *          - If sequencer is composed of several ranks, during the scan
  *            sequence flag EOC only is raised, at the end of the scan sequence
  *            both flags EOC and EOS are raised.
  *         To clear this flag, either use function: 
  *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
  *         model polling: @ref HAL_ADC_PollForConversion() 
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)

read = HAL_ADC_GetValue(&hadc1);

/****** o código a seguir converte a leitura do adc para tensão, utilizando uma variável float ******/
   read_f = (float)(read*3.3)/4095;
   
   // comparar este resultado com aquele obtido no osciloscópio, para diferentes medidas (rms, médio, etc.)
   
   /****** o código a seguir implementa um filtro de média móvel, para tentar medir igual ao osciloscópio**/
   
      read_f =0; // variável float
    for (i = 1; i <= 6; i++)
       {
          HAL_ADC_Start(&hadc1);
          HAL_ADC_PollForConversion(&hadc1,100);
          read = HAL_ADC_GetValue(&hadc1);
          read_f = (float)(read*3.3)/4095 +read_f;
          vetv[i]=read_f;  // vetor tem que ser float também!
       }
    read_f = read_f/6;
    HAL_Delay(1000);

/*leitura de múltiplos canais utilizando o pooling*/

 // Leitura do ADC em PB0
ADC1_Set_Channel(ADC_CHANNEL_8); // 
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 100);
	  adc_value = HAL_ADC_GetValue(&hadc1);  // valor entre 0 e 4095
	  HAL_ADC_Stop(&hadc1);
  // Leitura do ADC em PA0 
	  ADC1_Set_Channel(ADC_CHANNEL_0);
	  HAL_ADC_Start(&hadc1);
	  HAL_ADC_PollForConversion(&hadc1, 100);
	  adc_value1 = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_Stop(&hadc1);

/*o código a seguir acende os leds em sequência, para mostrar a faixa de tensão em que se encontra a leitura do conversor A/D, os leds variam a cada 3,3/5 = 0,66 V*/

if(0<read_f && read_f<0.66)
    {
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, 0);
    }
    if(0.66<read_f && read_f<1.32)
    { 
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2,1);
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, 0);
    
    }
    if(1.32<read_f && read_f<1.98)
    { 
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 1);
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, 0);
    }
    if(1.98<read_f && read_f<2.66)
    { 
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4,1);
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
    }
    if(2.66<read_f && read_f<3.3)
    { 
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, 1);
    }

/* o código a seguir converter dois canais A0 e A1 utilizando DMA*/

uint32_t AD_RES_BUFFER[2];
float AD_RES_f[2];

// Start ADC Conversion in DMA Mode 
HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER, 2);
AD_RES_f[0] = (float)(AD_RES_BUFFER[0]*100)/4095;
AD_RES_f[1] = (float)(AD_RES_BUFFER[1]*100)/4095;

// conversão DMA com laço for

HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER, 2);
HAL_Delay(250);

for(i=0;i<2;i++)
{
    resultado[i] = (float)(AD_RES_BUFFER[i]*100)/4095;
}

/*o código a seguir é uma função para ler um canal genérico do ADC*/

//FUNÇÃO PARA LER UM CANAL DO ADC
uint32_t ler_canal_adc(uint32_t canal) {
	ADC_ChannelConfTypeDef sConfig = {0};

    sConfig.Channel = canal;
    sConfig.Rank = 1;
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
    	Error_Handler();
    }

    HAL_ADC_Start(&hadc1);
    HAL_ADC_PollForConversion(&hadc1, 100);
    uint32_t valor_adc = HAL_ADC_GetValue(&hadc1);
    HAL_ADC_Stop(&hadc1);

    return valor_adc;
}


////////////////////////
// comunicação serial //
////////////////////////

// funções disponíveis em Class\CDC -> usbd_cdc.c

/**
  * @brief  USBD_CDC_TransmitPacket
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
sprintf(buffer,"tensão no ADC %d mV",(read[0]*3300/4095 );

/**
  * @brief  USBD_CDC_ReceivePacket
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)

memset(gUSBRxBuffer,0,255);
memcpy(gUSBRxBuffer,Buf,*Len);


// transmitir mensagem
#include <string.h>
uint8_t buffer[255]; //para envio de dados para o terminal
sprintf(buffer,"Menu de escolha para configuracao do sistema\r\n1. Biblioteca\r\n2. Manual\r\n");
CDC_Transmit_FS(buffer, strlen(buffer));

////////////////////////
// Bib LCD 16x2       //
////////////////////////

#include "lcd_txt.h" 

 lcd_init();                        // inicializa o display
 lcd_puts(0,0,(int8_t*)"lcd test"); // escreve no display
 HAL_Delay(5000);
 lcd_clear();                       // limpa o display

// bibliotecas para usar o lcd no stm32

#include "main.h"
#include "i2c_lcd.h" // essa aqui inicializa e permite o uso do lcd..
#include "stdio.h"
#include "printf.h" // essa aqui tem um sprintf que não dá erro...

I2C_LCD_HandleTypeDef lcd1;

/* inicializa o lcd, tem que colocar o endereço e, no caso do lcd utilizado, precisou deslocar em >>1 ele..*/
lcd1.hi2c = &hi2c1;
lcd1.address = 0x27<<1;
lcd_init(&lcd1);


/* o código a seguir mostra na tela uma variável que é incrementada por um laço for */

for(i=0;i<100;i++)
{
   lcd_gotoxy(&lcd1, 0, 0);
   snprintf(str_lcd,32, "Potencia Ativa : %i", i);
   lcd_puts(&lcd1, str_lcd);
   lcd_gotoxy(&lcd1, 1, 0);
   snprintf(str_lcd,32, "Potencia Reativa : %i", i);
   lcd_puts(&lcd1, str_lcd);
   HAL_Delay(j);
 }

/* o código a seguir mostra na tela uma visualização de um medidor de temperatura e humidade, similar ao AC2000 PLUS */

// definir fora do int main
void lcd_temp_tela_inicial(void); // antes do int main

void lcd_temp_tela_inicial(void) // depois do int main, ou coloca esse direto em cima do int main, vai funcionar também
{
	lcd_clear(&lcd1);

		lcd_gotoxy(&lcd1, 0, 0);
		lcd_puts(&lcd1, "00.0");

		lcd_gotoxy(&lcd1, 7, 0);
		lcd_puts(&lcd1, "Level");

		lcd_gotoxy(&lcd1, 15, 0);
		lcd_puts(&lcd1, "00:00");

		lcd_gotoxy(&lcd1, 8, 1);
		lcd_puts(&lcd1, "00");

		lcd_gotoxy(&lcd1, 0, 1);
		lcd_puts(&lcd1, "00.0%");

		lcd_gotoxy(&lcd1, 14, 1);
		lcd_puts(&lcd1, "Day:");

		lcd_gotoxy(&lcd1, 18, 1);
		lcd_puts(&lcd1, "00");

}

// pode chamar durante a inicialização ou no meio do código
lcd_temp_tela_inicial(); 

// pode associar a uma variável e uma lógica, para invocar ele pela live watch do cube ide

if(z1==0)
   lcd_temp_tela_inicial();

// teste genérico para variar os dígitos da tela de temperatura e humidade

int x11=0,y11=0,z1=1,i=0,j=800;
char str_lcd[32]="teste";

for(i=0;i<100;i++)
		{
			lcd_gotoxy(&lcd1,0 ,0);
			snprintf(str_lcd,32, "23.%i", i);
			lcd_puts(&lcd1, str_lcd);



			if (i>50)
			{
				lcd_gotoxy(&lcd1, 0, 1);
				snprintf(str_lcd,32, "%i:%i", i);
				lcd_puts(&lcd1, str_lcd);


			}

			if (i<11)
			{

				// nivel
				lcd_gotoxy(&lcd1, 8, 1);
				snprintf(str_lcd,32, "%i", i);
				lcd_puts(&lcd1, str_lcd);
			}

			if (i<5)
			{

				// dia
				lcd_gotoxy(&lcd1, 18, 1);
				snprintf(str_lcd,32, "%i", i);
				lcd_puts(&lcd1, str_lcd);
			}
			    HAL_Delay(j);

		}

// transformando números float e colocando eles na tela, com duas casas após a vírgula
// OBS: se a tela ficar cheia de caracteres, reiniciar o microcontrolador e o display, desplugando o gravador da USB.
// dá pra ver na watchwindow as variáveis, inclusive a str_lcd, nela aparece os dígitos que serão transmitidos para o display

lcd_gotoxy(&lcd1,0 ,0);
snprintf(str_lcd,32, "%.1f", AD_RES_f[0]);
lcd_puts(&lcd1, str_lcd);

lcd_gotoxy(&lcd1, 0, 1);
snprintf(str_lcd,32, "%.1f", AD_RES_f[1]);
lcd_puts(&lcd1, str_lcd);


// menu com 7 opções

// definir as funções como ponteiros, caso use o snprintf dentro delas
static void LCD_MENU_INICIAL(char *x, char *y, char *z, char *w);

// variáveis genéricas para escrita do lcd
char str_lcd1[80],str_lcd2[80],str_lcd3[80],str_lcd4[80];

// incrementar a variável dentro de uma interrupção, e limpar o display nela
switch(k)
		{
		case 0:
		{
	// definir essas variáveis strings genéricas, e deixar elas pronta para receberem
// a informação que vai para o lcd
			snprintf(str_lcd1,80," %0.2f", Vo);
			snprintf(str_lcd2,80," %0.2f", Io);
			snprintf(str_lcd3,80," %0.2f", S0_);
			snprintf(str_lcd4,80," %0.2f", Q0_);
			LCD_MENU_INICIAL(str_lcd1,str_lcd2,str_lcd3,str_lcd4);

			break;
		}
		case 1:
		{
			snprintf(str_lcd1,80," %0.2f", custo_kWh_1d);
			snprintf(str_lcd2,80," %0.2f", 0.57);
			LCD_MENU_KWDIARIO(str_lcd1,str_lcd2);

			break;
		}
		case 2:
		{
			snprintf(str_lcd1,80," %0.2f", custo_kWh_1d);
			snprintf(str_lcd2,80," %0.2f", 0.57);
			LCD_MENU_KWSEMANAL(str_lcd1,str_lcd2);

			break;
		}
		case 3:
		{
			snprintf(str_lcd1,80," %0.2f", custo_kWh_Mes);
			snprintf(str_lcd2,80," %0.2f", 0.57);
			LCD_MENU_KWMENSAL(str_lcd1,str_lcd2);

			break;
		}
		case 4:
		{
			snprintf(str_lcd1,80," %0.2f", custo_kWh_Mes);
			snprintf(str_lcd2,80," %0.2f", 0.57);
			LCD_MENU_KWDEBITO(str_lcd1,str_lcd2);

			break;
		}
		case 5:
		{
			snprintf(str_lcd1,80," %0.2f", 0.57);
			//snprintf(str_lcd2,255," %0.2f", S0_);
			LCD_MENU_TARIFA(str_lcd1);

			break;
		}
		case 6:
		{
			snprintf(str_lcd1,80," %0.2f", S0_);
			snprintf(str_lcd2,80," %0.2f", S0_);
			LCD_MENU_CREDTEM(str_lcd1,str_lcd2);

			break;
		}
		case 7:
		{
			snprintf(str_lcd1,80," OK", S0_);
			snprintf(str_lcd2,80," %d", falha_);
			snprintf(str_lcd3,80," 15/06/2025", str_lcd1);
			LCD_MENU_MISC(str_lcd1,str_lcd2,str_lcd3);

			break;
		}
		}

// adotar esse padrão para as outras funções
void LCD_MENU_INICIAL(char *x, char *y, char *z, char *w)
{


	lcd_gotoxy(&lcd1, 0, 0);
	lcd_puts(&lcd1, "Vo:");

	lcd_gotoxy(&lcd1, 2, 0);
	lcd_puts(&lcd1, x);

	lcd_gotoxy(&lcd1, 9, 0);
	lcd_puts(&lcd1, "Io:");

	lcd_gotoxy(&lcd1, 12, 0);
	lcd_puts(&lcd1, y);

	lcd_gotoxy(&lcd1, 0, 1);
	lcd_puts(&lcd1, "S0:");

	lcd_gotoxy(&lcd1, 2, 1);
	lcd_puts(&lcd1, z);

	lcd_gotoxy(&lcd1, 0, 2);
	lcd_puts(&lcd1, "Q0:");

	lcd_gotoxy(&lcd1, 2, 2);
	lcd_puts(&lcd1, w);
}

// percorrer todas as posições de um display 20x4

int x11=0,y11=0,i=0,j=0;
char str_lcd[32]="teste";

		for(i=0;i<4;i++)
		{
			for(j=0;j<20;j++)
			{
				lcd_gotoxy(&lcd1,j ,i);
				snprintf(str_lcd,32, "%i", i);
				lcd_puts(&lcd1, str_lcd);
				HAL_Delay(150);
			}
		}

////////////////////////
//       Proteus      //
////////////////////////

HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
uint32_t AD_RES_BUFFER[2],duty=0;
float AD_RES_f[2];


/* o código a seguir testa o adc e o pwm, ao ajustar o adc altera a razão cíclica, acende um led para provar que o adc funciona, e pisca outro para mostrar que o código está sendo executado */

		/* USER CODE END WHILE */
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
		HAL_Delay(200);
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
		HAL_Delay(200);



		// Start ADC Conversion in DMA Mode
		HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER, 2);
		AD_RES_f[0] = (float)(AD_RES_BUFFER[0]*3.3)/4095;
		AD_RES_f[1] = (float)(AD_RES_BUFFER[1]*100)/4095;

		/*o código a seguir acende os leds em sequência, para mostrar a faixa de tensão em que se encontra a leitura do conversor A/D, os leds variam a cada 3,3/5 = 0,66 V*/

		if(0<AD_RES_f[0] && AD_RES_f[0]<2)
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
		}

		duty = (float)(AD_RES_BUFFER[0]*100)/4095;
		htim2.Instance->CCR1 = (htim2.Instance->ARR*duty)/100;
		/* USER CODE BEGIN 3 */
////////////////////////
// codigos auxiliares //
////////////////////////

// cálculo potências

#include "math.h"

float resultado[]={0,0},S0_= 0 ,Q0_= 0,theta_= 0 ;

S0_ =resultado[0]*resultado[1]*cosf(theta_);
Q0_ =resultado[0]*resultado[1]*sinf(theta_);

    i++;
    if(i==100000)
    i=0;
